----------------PYTHON---------------
import time
time.sleep(1)
def binarySearch(arr, l, r, x):

    # Check base case
    if r >= l:

        mid = int(l + (r - l)/2)

        # If element is present at the middle itself
        if arr[mid] == x:
            return mid

        # If element is smaller than mid, then it can only
        # be present in left subarray
        elif arr[mid] > x:
            return binarySearch(arr, l, mid-1, x)

        # Else the element can only be present in right subarray
        else:
            return binarySearch(arr, mid+1, r, x)

    else:
        # Element is not present in the array
        return -1


n = int(input())
a = [int(x) for x in input().split()]
k = int(input())

print(binarySearch(a, 0, n-1, k))


----------JAVA----------------
import java.io.*;
import java.util.*;
class BinarySearch 
{ 
	int binarySearch(int arr[], int l, int r, int x) 
	{ 
		if (r >= l) { 
			int mid = l + (r - l) / 2; 

			// If the element is present at the 
			// middle itself 
			if (arr[mid] == x) 
				return mid; 

			// If element is smaller than mid, then 
			// it can only be present in left subarray 
			if (arr[mid] > x) 
				return binarySearch(arr, l, mid - 1, x); 

			// Else the element can only be present 
			// in right subarray 
			return binarySearch(arr, mid + 1, r, x); 
		} 

		// We reach here when element is not present 
		// in array 
		return -1; 
	} 

	public static void main(String args[]) 
	{ 
		BinarySearch ob = new BinarySearch(); 
        
        Scanner input = new Scanner(System.in);
        
        int n = input.nextInt();
        int arr[], counter ;
        
        arr = new int[n];
        for (counter = 0; counter < n; counter++)
            arr[counter] = input.nextInt();
        
        int x = input.nextInt(); 
        System.out.println(ob.binarySearch(arr, 0, n - 1, x)); 
    }   
}


------------C code-----------------------
#include<stdio.h>
int binarySearch(int *arr, int l, int r, int x)
{
	if (r >= l) { 
		int mid = l + (r - l) / 2; 

		if (arr[mid] == x) 
			return mid; 

		if (arr[mid] > x) 
			return binarySearch(arr, l, mid - 1, x); 

		return binarySearch(arr, mid + 1, r, x); 
	} 
	return -1; 
}
int main()
{
	int n,x;
	scanf("%d",&n);
	int arr[n];
	for(int i=0;i<n;i++)
		scanf("%d",&arr[i]);
	scanf("%d",&x);
	printf("%d",binarySearch(arr, 0, n-1, x));
	return 0;
}


-----------CPP code-------------------------------
#include<iostream>
using namespace std;
int binarySearch(int *arr, int l, int r, int x)
{
	if (r >= l) { 
		int mid = l + (r - l) / 2; 

		if (arr[mid] == x) 
			return mid; 

		if (arr[mid] > x) 
			return binarySearch(arr, l, mid - 1, x); 

		return binarySearch(arr, mid + 1, r, x); 
	} 
	return -1; 
}
int main()
{
	int n,x;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
		cin>>arr[i];
	cin>>x;
	cout<<binarySearch(arr, 0, n-1, x);
	return 0;
}
